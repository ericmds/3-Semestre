⮛ Desenvolvimento Ágil
  → Agil = Mudança → Adaptação a mudanças
  → Flexibilidade: sem metodologias engessadas, tamnho e organização de equipes diversas
  
  • Manifesto para o desenvolvimento ágil de software
    ↳ Valorizar: → *Indivíduos e interações entre eles* mais que procesos e ferramentas
                 → *Software em funcionamento* mais que documentação abrangente
                 → *Colaboração com cliente* mais que negociação de contratos
                 → *Responder a mundaças* mais que seguir um plano
    ↳ Princípios por trás do manifesto ágil:
                 → Prioridade, satisfazer o cliente com a entrega adiantada e contínua de SW de valor
                 → Aceitar e adequar-se a mudanças para o cliente tirar vantagens competitias
                 → Entregar SW funcionando com frequencia, na escala de horas, dias ou semanas
                 → Pessoas de negócios e desenvovimeno trabalha em conjuntos diariamente
                   ↳ Pessoas de negócios = representante do cliente
                 → Projetos com indivíduos motivados, ambiente e suporte, fazem a diferença
                 → O Método mais eficaz de se comunicar inter e intra, é conversa cara a cara
                 → Software funcional é a medida primária de progresso
                 → Todos são capazes de manter passos constantes em um ambiente sustentável
                   ↳ Sustentável = bom para o cliente e para empresa
                 → Contínua atenção à excelência técnica e bom design, aumenta a agilidade
                   ↳ Código bem estruturado, bem escrito
                 → Simplicidade, a arte de maximinizar a quantidade de trabalho que não precisou ser feito.
                 → As melhores arquiteturas e artefatos emergem de times auto-organizáveis
                 → Em intervalos regulares, o time reflete em como ficar mais efetivo e melhora
  
  • Agilidade e o Custo das Mudanças
    ↳ Os custos  de mudanças aumentam de forma não lineat
    ↳ Em teoria o custo final dos dois processos é igual, só não está distribuido de forma equilibrada
  
  • Modelos de Processo Ágil
    → EXTREME PROGRAMING - XP
      ↳ Emprega uma abordagem orientada a objetos, envolvendo um conjunto de regras e práticas constantes no contexto de quatro atividades metodológicas: planejamento, projeto, codificação e testes
        Planejamento: → Histórias de usuários: 
                        ↳ Pegar as caracteristicas que o usuario quer que o sistema tenha
                        ↳ Com base no que o usuário quer cria-se critérios de teste de aceitação
        Projeto:      → Princípio KIS
                        ↳ Preserva a simplicidade, preferir um projeto simples do que um mais complexo
                        ↳ Guia de implementação
        Codificação:  → Testes de unidades que exercitam cada gistória a ser incluída na versão corrente
                      → Incremento de software
                      → Programação em dupla, fornecendo mecanismo para resolução de problemas em tempo real (duas cabeças normalmente funcionam melhor que uma) e garantia de qualidade em tempo real (o código é revisto á medida que é criado)
        Testes:       → Teste de unidade: implementados usando uma metodologia que capacite a ser automatizado (assim, poderão ser executados fácil e repetidamente)
                      → Teste de aceitação: São especificados pelo cliente e mantêm o foco nas características e na funcionalidade do sisema total que são visíveis e que podem ser revistas pelo cliente

 → SCRUM


→ Backlog
  ↳ Lista de funcionalidades que o produto deve ter


























;;DANTT
